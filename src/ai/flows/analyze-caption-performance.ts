// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes caption performance and provides suggestions for improvement.
 *
 * - analyzeCaptionPerformance - A function that handles the caption performance analysis process.
 * - AnalyzeCaptionPerformanceInput - The input type for the analyzeCaptionPerformance function.
 * - AnalyzeCaptionPerformanceOutput - The return type for the analyzeCaptionPerformance function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AnalyzeCaptionPerformanceInputSchema = z.object({
  caption: z.string().describe('The social media caption to analyze.'),
  platform: z
    .enum(['Instagram', 'X', 'LinkedIn'])
    .describe('The platform where the caption was used.'),
  engagementMetrics: z
    .string()
    .describe(
      'The engagement metrics for the caption, such as likes, comments, shares, and impressions.'
    ),
  theme: z.string().describe('The theme of the caption.'),
  targetAudience: z.string().describe('The target audience of the caption.'),
  tone: z.string().describe('The tone of the caption (e.g., funny, professional, persuasive).'),
});
export type AnalyzeCaptionPerformanceInput = z.infer<
  typeof AnalyzeCaptionPerformanceInputSchema
>;

const AnalyzeCaptionPerformanceOutputSchema = z.object({
  suggestions: z
    .string()
    .describe(
      'Suggestions for improving the caption based on its performance and the input parameters.'
    ),
});
export type AnalyzeCaptionPerformanceOutput = z.infer<
  typeof AnalyzeCaptionPerformanceOutputSchema
>;

export async function analyzeCaptionPerformance(
  input: AnalyzeCaptionPerformanceInput
): Promise<AnalyzeCaptionPerformanceOutput> {
  return analyzeCaptionPerformanceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeCaptionPerformancePrompt',
  input: {
    schema: z.object({
      caption: z.string().describe('The social media caption to analyze.'),
      platform: z
        .enum(['Instagram', 'X', 'LinkedIn'])
        .describe('The platform where the caption was used.'),
      engagementMetrics: z
        .string()
        .describe(
          'The engagement metrics for the caption, such as likes, comments, shares, and impressions.'
        ),
      theme: z.string().describe('The theme of the caption.'),
      targetAudience: z.string().describe('The target audience of the caption.'),
      tone: z.string().describe('The tone of the caption (e.g., funny, professional, persuasive).'),
    }),
  },
  output: {
    schema: z.object({
      suggestions: z
        .string()
        .describe(
          'Suggestions for improving the caption based on its performance and the input parameters.'
        ),
    }),
  },
  prompt: `You are a social media marketing expert. Analyze the performance of the given caption and provide suggestions for improvement, focusing on increasing engagement.

Caption: {{{caption}}}
Platform: {{{platform}}}
Engagement Metrics: {{{engagementMetrics}}}
Theme: {{{theme}}}
Target Audience: {{{targetAudience}}}
Tone: {{{tone}}}

Provide specific and actionable suggestions for improvement. Consider the platform, target audience, and tone when making your recommendations.
`,
});

const analyzeCaptionPerformanceFlow = ai.defineFlow<
  typeof AnalyzeCaptionPerformanceInputSchema,
  typeof AnalyzeCaptionPerformanceOutputSchema
>(
  {
    name: 'analyzeCaptionPerformanceFlow',
    inputSchema: AnalyzeCaptionPerformanceInputSchema,
    outputSchema: AnalyzeCaptionPerformanceOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
